
#进程（Process）
------------------------------
进程本质上是一个正在执行的程序。
与每个进程相关的是进程的地址空间（address space）， 这是从某个最小值的存储位置（通常为0）到某个最大值存储位置的列表。
在这个地址空间中，进程可以进行读写。该地址空间中存放有可执行的程序，程序的数据以及程序的堆栈。
与进程相关的还有资源集，通常包括寄存器（含有程序计数器和堆栈指针），打开文件的清单，突出的报警，有关进程清单，以及运行该程序所需要的所有其他信息。
进程基本上是容纳运行一个程序所需要所有信息的容器。

在许多操作系统中，除了该进程自身的地址空间的内容以外，均存放在操作系统的一张表中，称为进程表（Process Table）。
进程表是数组（链表）结构，当前存放的每个进程都占用一项。

因此一个进程 包括：
1.进程的地址空间，往往称作磁芯映像（Core Image）
2.对应的进程表项，其中包括寄存器以及稍后重启该进程所需要的许多其他信息。


操作系统可以向进程发送一个警告信号（Alarm Signal）。
此信号引起进程暂时挂起，无论进程在做什么，系统将其寄存器的值保存包堆栈，并开始运行一个特别的信号处理。


#地址空间 （Address Space）
------------------------------
每台计算机都有一些主存，用来保存正在执行的程序。
每个进程有一些可以使用的地址集合，典型值从0开始到某个最大值。
在最简单的情况下，一个进程可拥有的最大地址空间小于主存。

虚拟内存：当运行的进程所拥有的地址空间大于计算机的主存，操作系统把部分地址空间装入主存，部分留在磁盘上，并在需要时，穿梭的交换它们。


#文件（File）
------------------------------
在读写文件前，首先要打开文件，检查其访问权限。若权限许可，系统将返回一个小整数，称作文件描述符（File Descriptor）供后续使用。
若禁止访问，则系统返回一个错误码。

Unix系统中有一个重要的概念是安装文件系统。可以调用mount，将CD-ROM或DVD上的文件系统接入到主文件树上。

特殊文件（special file）。 提供特殊文件是为了使I/O设备看起来像文件一般。
这样，就像使用系统调用读写文件一样，I/O设备也可以通过同样的系统进行读写。
有2种特殊文件：
1.块特殊文件	（Block special file）
  块特殊文件指那些由可随机存取的块组成的设备，如磁盘等。

2.字符特殊文件	（Character special file）
  字符特殊文件用于打印机，调职解调器或其他接受或输出字符流的设别。

按照惯例，特殊文件保存在目录/dev中。


管道Pipe。
管道是一种虚文件，它可连接2个进程。进程A和B希望通过管道对话，她们必须提前设置该管道。
进程A想对进程B发送数据时，A吧数据写到管道上，仿佛管道就是一个输出文件一样。
进程B可以通过读该管道获取数据，仿佛该管道就是一个输入文件一样。


#系统调用 System Call
举例：count=read(fd,buf,nbytes);
